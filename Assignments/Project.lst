Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/15/22 14:43:49
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: Pranav Prabhu
				; Last Modified: 03/15/2022
				; OSU email address: prabhup@oregonstate.edu
				; Course number/section: CS 271
				; Assignment Number: Final                Due Date: 03/15/2022
				; Description: this program implements a simple substitution cipher

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
																	; Decoy Data Values
					;operand1   WORD    -32768
					;operand2   WORD    -32768
					;dest       DWORD   0

																	; Encryption Data Values
					;myKey      BYTE   "efbcdghijklmnopqrstuvwxyza"
					;message    BYTE   "the contents of this message will be a mystery.", 0
					;dest       DWORD   -1

																	; Decryption Data Values
 00000000 65 66 62 63 64		myKey      BYTE   "efbcdghijklmnopqrstuvwxyza"
	   67 68 69 6A 6B
	   6C 6D 6E 6F 70
	   71 72 73 74 75
	   76 77 78 79 7A
	   61
 0000001A 75 69 64 20 62		message    BYTE   "uid bpoudout pg uijt ndttehd xjmm fd e nztudsz.#$%^&", 0
	   70 6F 75 64 6F
	   75 74 20 70 67
	   20 75 69 6A 74
	   20 6E 64 74 74
	   65 68 64 20 78
	   6A 6D 6D 20 66
	   64 20 65 20 6E
	   7A 74 75 64 73
	   7A 2E 23 24 25
	   5E 26 00
 0000004F FFFFFFFE			dest       DWORD   -2
					
																	; Key Generation Data Values
					;newKey     BYTE    26    DUP(?), 0
					;dest       DWORD   -3

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call	Randomize					; Irvine library procedure for initializing the random number generator

																	; Decoy
					;push   operand1
					;push   operand2
					;push   OFFSET dest
					;call   compute
					;mov    eax, dest					; currently dest holds a value of +26
					;call   WriteInt					; should display +26
					
																	; Encryption
					;push   OFFSET myKey
					;push   OFFSET message
					;push   OFFSET dest
					;call   compute						;;; message now contains the encrypted string
					;mov    edx, OFFSET message
					;call   WriteString					;;; should display "uid bpoudout pg uijt ndttehd xjmm fd e nztudsz."

																	; Decryption
 00000005  68 00000000 R		push   OFFSET myKey
 0000000A  68 0000001A R		push   OFFSET message
 0000000F  68 0000004F R		push   OFFSET dest
 00000014  E8 00000011			call   compute						;;; message now contains the decrypted string
 00000019  BA 0000001A R		mov    edx, OFFSET message
 0000001E  E8 00000000 E		call   WriteString					;;; should display "the contents of this message will be a mystery."

																	; Key Generation
					;push   OFFSET newKey
					;push   OFFSET dest
					;call   compute
					;; newKey now contains a randomly generated key.
					;; The key will contain all 26 letters of the alphabet (arranged in a random order). Note that newKey is not NULL terminated.

					exit								; exit to operating system
 00000023  6A 00	   *	    push   +000000000h
 00000025  E8 00000000 E   *	    call   ExitProcess
 0000002A			main ENDP

				; Description: calls the appropriate substitution cypher function based on destination
				; Receives: parameters of different types corresponding to function being called pushed onto the stack
				; Returns: sum for Decoy [OR] encrypted/decrypted message [OR] randomly generated key
				; Preconditions: paramters pushed onto the stack
				; Registers Changed: eax, ebx, ebp
 0000002A			Compute		PROC
					; "Welcome to my Substitution Cypher program, James!"

 0000002A  55				push	ebp
 0000002B  8B EC			mov		ebp, esp

 0000002D  8B 45 08			mov		eax, [ebp + 8]					; address of "destination" is stored eax
 00000030  8B 18			mov		ebx, [eax]						; dereferenced eax will move its actual value to ebx
 00000032  83 FB FF			cmp		ebx, -1
 00000035  74 1C			je		encrypt
 00000037  83 FB FE			cmp		ebx, -2
 0000003A  74 27			je		decrypt
 0000003C  83 FB FD			cmp		ebx, -3
 0000003F  74 32			je		key_gen

																	; Decoy mode
 00000041  66| FF 75 0E			push	WORD PTR [ebp + 14]				; push "operand1" value onto stack
 00000045  66| FF 75 0C			push	WORD PTR[ebp + 12]				; push "operand2" value onto stack
 00000049  FF 75 08			push	[ebp + 8]						; push "destination" value onto stack
 0000004C  E8 00000037			call	Decoy
 00000051  EB 2D			jmp		exit1

 00000053				encrypt:
 00000053  FF 75 10				push	DWORD PTR [ebp + 16]		; push "myKey" value onto stack
 00000056  FF 75 0C				push	DWORD PTR [ebp + 12]		; push "message" value onto stack
 00000059  FF 75 08				push	DWORD PTR [ebp + 8]			; push "destination" value onto stack
 0000005C  E8 00000043				call	Encryption
 00000061  EB 21				jmp		exit2

 00000063				decrypt:
 00000063  FF 75 10				push	DWORD PTR [ebp + 16]		; push "myKey" value onto stack
 00000066  FF 75 0C				push	DWORD PTR [ebp + 12]		; push "message" value onto stack
 00000069  FF 75 08				push	DWORD PTR [ebp + 8]			; push "destination" value onto stack
 0000006C  E8 0000005B				call	Decryption
 00000071  EB 11				jmp		exit2

 00000073				key_gen:
 00000073  FF 75 0C				push	DWORD PTR [ebp + 12]		; push "newKey" value onto stack
 00000076  FF 75 08				push	DWORD PTR [ebp + 8]			; push "destination" value onto stack
 00000079  E8 00000085				call	Key_Generation
 0000007E  EB 00				jmp		exit1

 00000080				exit1:									; for "Decoy" & "Key-Generation" modes
 00000080  5D					pop		ebp
 00000081  C2 0008				ret		8							; Decoy: 4 + 2 + 2 = 8		&		Key-gen: 4 + 4 = 8
					
 00000084				exit2:									; for "Encryption" & "Decryption" modes
 00000084  5D					pop		ebp
 00000085  C2 000C				ret		12							; 4 + 4 + 4 = 12 (3 parameters of size 4 bytes)
 00000088			Compute		ENDP

				; Description: computes sum of 16-bit operands
				; Receives: 2 operands & 1 destination integer
				; Returns: sum of the 2 operands
				; Preconditions: operands 1 & 2 are 16-bit signed WORDs and destination is a 32-bit signed DWORD
				; Registers Changed: eax (ax), ebx (bx), ecx, ebp
 00000088			Decoy		PROC
 00000088  55				push	ebp
 00000089  8B EC			mov		ebp, esp

 0000008B  66| 8B 45 0E			mov		ax, [ebp + 14]					; move value of "operand1" into ax (16-bit register)
 0000008F  66| 8B 5D 0C			mov		bx, [ebp + 12]					; move value of "operand2" into bx (16-bit register)
 00000093  0F BF C0			movsx	eax, ax							; sign extend ax register to eax to perform 32-bit addition
 00000096  0F BF DB			movsx	ebx, bx							; sign extend bx register to ebx to perform 32-bit addition
 00000099  03 C3			add		eax, ebx
 0000009B  8B 4D 08			mov		ecx, [ebp + 8]
 0000009E  89 01			mov		[ecx], eax						; store sum (actual value) in dereferenced ecx register

 000000A0  5D				pop		ebp

 000000A1  C2 0008			ret		8
 000000A4			Decoy		ENDP

				; Description: encrypts a given string of message using the key
				; Receives: 2 arrays and 1 destination integer (message, myKey, and destination)
				; Returns: encrypted message
				; Preconditions: both arrays are 32-bit BYTE arrays and destination is a 32-bit signed DWORD
				; Registers Changed: eax (al), ebx (bl), ebp, edi, esi
 000000A4			Encryption		PROC
 000000A4  55				push	ebp
 000000A5  8B EC			mov		ebp, esp

 000000A7  8B 75 10			mov		esi, [ebp + 16]					; myKey
 000000AA  8B 7D 0C			mov		edi, [ebp + 12]					; message
						
 000000AD				encrypt:
 000000AD  8A 07				mov		al, [edi]					; move each character in "message" into al register (8-bit)
 000000AF  3C 00				cmp		al, 0						; check if it's null-terminated (i.e., 0 represents end of string)
 000000B1  74 15				je		exit1
 000000B3  3C 61				cmp		al, 97						; 97 = a (ASCII value)
 000000B5  7C 0E				jl		loop_back
 000000B7  3C 7A				cmp		al, 122						; 122 = z (ASCII value)
 000000B9  7F 0A				jg		loop_back

 000000BB  2C 61				sub		al, 97						; subtract current character's decimal value from 97 (letter a) to match the key
 000000BD  0F BE C0				movsx	eax, al						; sign extend al (8-bit) to eax (32-bit)
 000000C0  8A 1C 06				mov		bl, [esi + eax]				; [esi + eax] moves to find the correct matching character in "myKey" array starting from index 0
 000000C3  88 1F				mov		[edi], bl					; put the encrypted string value back into message (dereferenced)

 000000C5					loop_back:
 000000C5  47						inc		edi						; move to the next character in "message" string
 000000C6  EB E5					jmp		encrypt
						
 000000C8				exit1:

 000000C8  5D				pop		ebp

 000000C9  C2 000C			ret		12
 000000CC			Encryption		ENDP

				; Description: decrypts a given string of message using the key
				; Receives: 2 arrays and 1 destination integer (message, myKey, and destination)
				; Returns: decrypted message
				; Preconditions: both arrays are 32-bit BYTE arrays and destination is a 32-bit signed DWORD
				; Registers Changed: eax (al), ebx (bl), ecx (cl), ebp, edi, esi
 000000CC			Decryption		PROC
 000000CC  55				push	ebp
 000000CD  8B EC			mov		ebp, esp

 000000CF  8B 75 10			mov		esi, [ebp + 16]					; myKey
 000000D2  8B 7D 0C			mov		edi, [ebp + 12]					; message

 000000D5				decrypt:
 000000D5  B9 00000000				mov		ecx, 0
 000000DA  8A 07				mov		al, [edi]					; move each character in "message" string to al register (8-bit)
 000000DC  3C 00				cmp		al, 0						; check if it's null-terminated (i.e., 0 represents end of string)
 000000DE  74 1F				je		exit1
 000000E0  3C 61				cmp		al, 97						; 97 = a (ASCII value)
 000000E2  7C 18				jl		loop_back
 000000E4  3C 7A				cmp		al, 122						; 122 = z (ASCII value)
 000000E6  7F 14				jg		loop_back
 000000E8  8B 75 10				mov		esi, [ebp + 16]

 000000EB					inner_loop:			
 000000EB  8A 1E					mov		bl, [esi]				; move each character in "myKey" to bl register (8-bit)
 000000ED  3A C3					cmp		al, bl					; decrypt if equal (i.e., characters match)
 000000EF  75 02					jne		not_equal
 000000F1  EB 04					jmp		equal
										
 000000F3						not_equal:
 000000F3  46							inc		esi					; move to the next character in "myKey" to find a match and decrypt
 000000F4  41							inc		ecx
 000000F5  EB F4						jmp		inner_loop
							
 000000F7						equal:
 000000F7  83 C1 61						add		ecx, 97				; add current character's decimal value to 97 (letter a) to decrypt the message
 000000FA  88 0F						mov		[edi], cl			; put each decrypted character in the original "message" string

 000000FC						loop_back:
 000000FC  47							inc		edi					; move to the next character in "message" string
 000000FD  EB D6						jmp		decrypt

 000000FF				exit1:

 000000FF  5D				pop		ebp

 00000100  C2 000C			ret		12
 00000103			Decryption		ENDP

				; Description: generates a random key consisting of non-repetive lowercase alphabetic characters
				; Receives: an array and a destination integer (newKey and destination)
				; Returns: random new key
				; Preconditions: arrays is a 32-bit BYTE array and destination is a 32-bit signed DWORD
				; Registers Changed: eax (al), ebx, ecx, ebp, edi
 00000103			Key_Generation	PROC
 00000103  55				push	ebp
 00000104  8B EC			mov		ebp, esp

 00000106  8B 7D 0C			mov		edi, [ebp + 12]					; "newKey" array
 00000109  B9 00000000			mov		ecx, 0							; int i = 0
					
 0000010E				outer_loop:
 0000010E  83 F9 1A				cmp		ecx, 26						; total of 26 alphabetic characters
 00000111  7D 27				jge		exit1
 00000113  B8 0000001A				mov		eax, 26
 00000118  E8 00000000 E			call	RandomRange					; generates random number between 0-25, inclusive
 0000011D  83 C0 61				add		eax, 97
 00000120  88 04 0F				mov		[edi + ecx], al				; equivalent form of "str[i] = num" in C
 00000123  BB 00000000				mov		ebx, 0						; int j = 0

 00000128					inner_loop:							; loops from index 0 to current size of array at each iteration to find a matching (existing) character in array
 00000128  3B D9					cmp		ebx, ecx
 0000012A  7D 0B					jge		continue
 0000012C  8A 14 1F					mov		dl, [edi + ebx]
 0000012F  38 14 0F					cmp		[edi + ecx], dl			; if str[i] == str[j]:
 00000132  74 DA					je		outer_loop				;		break
 00000134  43						inc		ebx
 00000135  EB F1					jmp		inner_loop

 00000137				continue:
 00000137  41					inc		ecx							; increment the count (i.e., i++)
 00000138  EB D4				jmp		outer_loop

 0000013A				exit1:
 0000013A  8B D7				mov		edx, edi					; move each character in edi to edx to print it
 0000013C  E8 00000000 E			call	WriteString					; print a new key
 00000141  E8 00000000 E			call	Crlf

 00000146  5D					pop		ebp

 00000147  C2 0008				ret		8
 0000014A			Key_Generation	ENDP

				END main

				;													C code for Key Generation
				; #include <stdio.h>
				; #include <stdlib.h>
				; #include <time.h>
				;
				;int main() {
				;    srand(time(NULL));
				;    
				;    char str[26];
				;    int num = 0, i = 0, is_unique;
				;	 
				;    while (i < 26) {
				;        is_unique = 1;
				;        num = (rand() % 26) + 97;
				;        str[i] = num;
				;
				;        for (int j = 0; j < i; j++) {
				;            if (str[i] == str[j]) {
				;                is_unique = 0;
				;                break;
				;            }
				;        }
				;
				;        if (is_unique == 0) continue;
				;
				;        printf("%d\t", str[i]);
				;        printf("%c\t", str[i]);
				;        printf("%d\n", i);
				;
				;        i++;
				;    }
				;    
				;    return 0;
				;}
Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/15/22 14:43:49
#Program Template     (template.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000053 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000014A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Compute  . . . . . . . . . . . .	P Near	 0000002A _TEXT	Length= 0000005E Public STDCALL
  encrypt  . . . . . . . . . . .	L Near	 00000053 _TEXT	
  decrypt  . . . . . . . . . . .	L Near	 00000063 _TEXT	
  key_gen  . . . . . . . . . . .	L Near	 00000073 _TEXT	
  exit1  . . . . . . . . . . . .	L Near	 00000080 _TEXT	
  exit2  . . . . . . . . . . . .	L Near	 00000084 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Decoy  . . . . . . . . . . . . .	P Near	 00000088 _TEXT	Length= 0000001C Public STDCALL
Decryption . . . . . . . . . . .	P Near	 000000CC _TEXT	Length= 00000037 Public STDCALL
  decrypt  . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  inner_loop . . . . . . . . . .	L Near	 000000EB _TEXT	
  not_equal  . . . . . . . . . .	L Near	 000000F3 _TEXT	
  equal  . . . . . . . . . . . .	L Near	 000000F7 _TEXT	
  loop_back  . . . . . . . . . .	L Near	 000000FC _TEXT	
  exit1  . . . . . . . . . . . .	L Near	 000000FF _TEXT	
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Encryption . . . . . . . . . . .	P Near	 000000A4 _TEXT	Length= 00000028 Public STDCALL
  encrypt  . . . . . . . . . . .	L Near	 000000AD _TEXT	
  loop_back  . . . . . . . . . .	L Near	 000000C5 _TEXT	
  exit1  . . . . . . . . . . . .	L Near	 000000C8 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Key_Generation . . . . . . . . .	P Near	 00000103 _TEXT	Length= 00000047 Public STDCALL
  outer_loop . . . . . . . . . .	L Near	 0000010E _TEXT	
  inner_loop . . . . . . . . . .	L Near	 00000128 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000137 _TEXT	
  exit1  . . . . . . . . . . . .	L Near	 0000013A _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002A Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dest . . . . . . . . . . . . . .	DWord	 0000004F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
message  . . . . . . . . . . . .	Byte	 0000001A _DATA	
myKey  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
